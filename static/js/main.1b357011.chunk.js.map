{"version":3,"sources":["api/people.ts","components/PersonRow.tsx","components/PeopleTable/PeopleTable.tsx","components/PeoplePage.tsx","components/Header.tsx","App.tsx","index.tsx"],"names":["findParent","arr","parentName","find","parent","name","getPeopleWithParentsObjects","fetch","then","response","json","people","map","person","_i","mother","motherName","father","fatherName","PersonRow","sex","born","died","slug","id","to","PeopleTable","className","PeoplePage","useState","setPeople","useEffect","Header","App","path","element","ReactDOM","render","document","getElementById"],"mappings":"yOAMMA,EAAa,SAACC,EAAyBC,GAC3C,OAAOD,EAAIE,MACT,SAACC,GAAD,OAA8BF,IAAeE,EAAOC,SAS3CC,EAA8B,WACzC,OALOC,MATL,qEAUCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAK1BF,MAAK,SAAAG,GAAM,OAAIA,EACbC,KAAI,SAACC,EAAQC,EAAIb,GAAb,mBAAC,eACDY,GADA,IAEHE,OAAQf,EAAWC,EAAKY,EAAOG,YAC/BC,OAAQjB,EAAWC,EAAKY,EAAOK,qB,cCf1BC,EAA6B,SAAC,GAAgB,IAAdN,EAAa,EAAbA,OAEzCR,EACEQ,EADFR,KAAMe,EACJP,EADIO,IAAKC,EACTR,EADSQ,KAAMC,EACfT,EADeS,KAAMN,EACrBH,EADqBG,WAAYE,EACjCL,EADiCK,WAAYH,EAC7CF,EAD6CE,OAAQE,EACrDJ,EADqDI,OAAQM,EAC7DV,EAD6DU,KAGjE,OACE,qBAAIC,GAAE,UAAKD,GAAX,UACE,6BAAKlB,IACL,6BAAKe,IACL,6BAAKC,IACL,6BAAKC,IACL,6BACGP,EACI,cAAC,IAAD,CAAUU,GAAE,WAAMV,EAAOQ,MAAzB,SAAkCP,IAClCA,IAEP,6BACGC,EACI,cAAC,IAAD,CAAUQ,GAAE,WAAMR,EAAOM,MAAzB,SAAkCL,IAClCA,QCnBAQ,EAA+B,SAAC,GAAgB,IAAdf,EAAa,EAAbA,OAC7C,OACE,uBAAOgB,UAAU,cAAjB,SACE,kCACE,+BACE,sCACA,qCACA,sCACA,sCACA,wCACA,2CAEDhB,EAAOC,KAAI,SAAAC,GAAM,OAChB,cAAC,EAAD,CAAWA,OAAQA,GAAaA,EAAOU,eChBpCK,EAAsB,WACjC,MAA4BC,mBAAmB,IAA/C,mBAAOlB,EAAP,KAAemB,EAAf,KAMA,OAJAC,qBAAU,WACRzB,IAA8BE,KAAKsB,KAClC,IAGD,qCACE,6CACA,cAAC,EAAD,CAAanB,OAAQA,QCbdqB,EAAkB,kBAC7B,gCACE,cAAC,IAAD,CAASP,GAAG,IAAZ,kBACA,cAAC,IAAD,CAASA,GAAG,UAAZ,wBCmBWQ,EAjBH,WACV,OACE,cAAC,IAAD,UACE,sBAAKN,UAAU,MAAf,UACE,cAAC,EAAD,IAEA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOO,KAAK,IAAIC,QAAS,4CACzB,cAAC,IAAD,CAAOD,KAAK,UAAUC,QAAS,cAAC,EAAD,MAC/B,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,IAAD,CAAUV,GAAG,QAC1C,cAAC,IAAD,CAAOS,KAAK,IAAIC,QAAS,2DCbnCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1b357011.chunk.js","sourcesContent":["import { Person } from '../types/Person';\nimport { PersonFromServer } from '../types/PersonFromServer';\n\nconst API_URL\n  = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nconst findParent = (arr: PersonFromServer[], parentName: string) => {\n  return arr.find(\n    (parent: PersonFromServer) => parentName === parent.name,\n  );\n};\n\nexport const getPeople = (): Promise<PersonFromServer[]> => {\n  return fetch(API_URL)\n    .then(response => response.json());\n};\n\nexport const getPeopleWithParentsObjects = (): Promise<Person[]> => {\n  return getPeople()\n    .then(people => people\n      .map((person, _i, arr) => ({\n        ...person,\n        mother: findParent(arr, person.motherName),\n        father: findParent(arr, person.fatherName),\n      })));\n};\n","import React from 'react';\nimport { HashLink } from 'react-router-hash-link';\nimport { Person } from '../types/Person';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonRow: React.FC<Props> = ({ person }) => {\n  const {\n    name, sex, born, died, motherName, fatherName, mother, father, slug,\n  } = person;\n\n  return (\n    <tr id={`${slug}`}>\n      <td>{name}</td>\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother\n          ? (<HashLink to={`#${mother.slug}`}>{motherName}</HashLink>)\n          : (motherName)}\n      </td>\n      <td>\n        {father\n          ? (<HashLink to={`#${father.slug}`}>{fatherName}</HashLink>)\n          : (fatherName)}\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Person } from '../../types/Person';\nimport { PersonRow } from '../PersonRow';\n\ntype Props = {\n  people: Person[]\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  return (\n    <table className=\"PeopleTable\">\n      <tbody>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n        {people.map(person => (\n          <PersonRow person={person} key={person.slug} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getPeopleWithParentsObjects } from '../api/people';\nimport { Person } from '../types/Person';\nimport { PeopleTable } from './PeopleTable/PeopleTable';\n\nexport const PeoplePage:React.FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n\n  useEffect(() => {\n    getPeopleWithParentsObjects().then(setPeople);\n  }, []);\n\n  return (\n    <>\n      <h1>People Page</h1>\n      <PeopleTable people={people} />\n    </>\n  );\n};\n","import { NavLink } from 'react-router-dom';\n\nexport const Header:React.FC = () => (\n  <nav>\n    <NavLink to=\"/\">Home</NavLink>\n    <NavLink to=\"/people\">People</NavLink>\n  </nav>\n);\n","import './App.scss';\nimport {\n  HashRouter as Router, Navigate, Route, Routes,\n} from 'react-router-dom';\nimport { PeoplePage } from './components/PeoplePage';\nimport { Header } from './components/Header';\n\nconst App = () => {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header />\n\n        <Routes>\n          <Route path=\"/\" element={<h1>Homepage</h1>} />\n          <Route path=\"/people\" element={<PeoplePage />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" />} />\n          <Route path=\"*\" element={<h1>Page not found</h1>} />\n        </Routes>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}